{"version":3,"sources":["node_modules/@babel/runtime/helpers/esm/extends.js","node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","node_modules/qrcanvas/lib/qrcanvas.esm.js","node_modules/qrcode-generator/qrcode.js","src/app/modules/shared/components/qrcode/qrcode.html","src/app/pages/create-classes/qrcode/qrcode.page.html","src/app/modules/shared/components/qrcode/qrcode.ts","src/app/modules/shared/shared.module.ts","src/app/pages/create-classes/qrcode/qrcode-routing.module.ts","src/app/pages/create-classes/qrcode/qrcode.module.ts","src/app/pages/create-classes/qrcode/qrcode.page.scss","src/app/pages/create-classes/qrcode/qrcode.page.ts"],"names":[],"mappings":"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","sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","/*! qrcanvas v3.1.1 | ISC License */\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport qrcode from 'qrcode-generator';\n\nvar COLOR_BLACK = '#000';\nvar COLOR_WHITE = '#fff';\n\nvar helpers = {\n  createCanvas: createCanvas,\n  isCanvas: isCanvas,\n  isDrawable: isDrawable,\n  getCanvas: getCanvas,\n  updateCanvas: updateCanvas,\n  drawCanvas: drawCanvas,\n  drawText: drawText\n};\n\nfunction createCanvas(width, height) {\n  var canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  return canvas;\n}\n\nfunction isCanvas(el) {\n  return el instanceof HTMLCanvasElement;\n}\n\nfunction isDrawable(el) {\n  return isCanvas(el) || el instanceof HTMLImageElement;\n}\n/**\n * @desc Create a new canvas.\n * @param {Int} width Width of the canvas.\n * @param {Int} height Height of the canvas.\n * @return {Canvas}\n */\n\n\nfunction getCanvas(width, height) {\n  return helpers.createCanvas(width, height == null ? width : height);\n}\n\nfunction updateCanvas(canvas, width, height) {\n  if (canvas) {\n    canvas.width = width;\n    canvas.height = height == null ? width : height;\n    return canvas;\n  }\n\n  return getCanvas(width, height);\n}\n\n/**\n * @desc Draw to the canvas with given image or colors.\n * @param {Canvas} canvas The canvas to initialize.\n * @param {Image | String | Array} data\n * @param {Object} options\n *    cellSize: {Int}\n *    clear: {Boolean}\n */\nfunction drawCanvas(canvas, data, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      cellSize = _options.cellSize,\n      context = _options.context,\n      _options$clear = _options.clear,\n      clear = _options$clear === void 0 ? true : _options$clear;\n  var width = canvas.width,\n      height = canvas.height;\n  var queue = [data];\n  var ctx = context || canvas.getContext('2d');\n  if (clear) ctx.clearRect(0, 0, width, height);\n  ctx.globalCompositeOperation = 'source-over';\n\n  while (queue.length) {\n    var item = queue.shift();\n\n    if (Array.isArray(item)) {\n      queue = item.concat(queue);\n    } else if (item) {\n      var obj = void 0;\n\n      if (helpers.isDrawable(item)) {\n        obj = {\n          image: item\n        };\n      } else if (typeof item === 'string') {\n        obj = {\n          style: item\n        };\n      } else {\n        obj = item;\n      }\n\n      var x = (obj.col == null ? obj.x : obj.col * cellSize) || 0;\n      var y = (obj.row == null ? obj.y : obj.row * cellSize) || 0;\n      if (x < 0) x += width;\n      if (y < 0) y += width;\n      var w = ('cols' in obj ? obj.cols * cellSize : obj.w) || width;\n      var h = ('rows' in obj ? obj.rows * cellSize : obj.h) || width;\n\n      if (obj.image) {\n        ctx.drawImage(obj.image, x, y, w, h);\n      } else {\n        ctx.fillStyle = obj.style || 'black';\n        ctx.fillRect(x, y, w, h);\n      }\n    }\n  }\n\n  return canvas;\n}\n\nfunction drawText(text, options) {\n  var _ref = options || {},\n      _ref$fontSize = _ref.fontSize,\n      fontSize = _ref$fontSize === void 0 ? 64 : _ref$fontSize,\n      _ref$fontStyle = _ref.fontStyle,\n      fontStyle = _ref$fontStyle === void 0 ? '' : _ref$fontStyle,\n      _ref$fontFamily = _ref.fontFamily,\n      fontFamily = _ref$fontFamily === void 0 ? 'Cursive' : _ref$fontFamily,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? null : _ref$color,\n      _ref$pad = _ref.pad,\n      pad = _ref$pad === void 0 ? 8 : _ref$pad,\n      _ref$padColor = _ref.padColor,\n      padColor = _ref$padColor === void 0 ? COLOR_WHITE : _ref$padColor,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 1 : _ref$mode;\n\n  var canvas = getCanvas(1);\n  var ctx = canvas.getContext('2d');\n  var padColorArr;\n\n  if (padColor) {\n    ctx.fillStyle = padColor;\n    ctx.fillRect(0, 0, 1, 1);\n\n    var _ctx$getImageData = ctx.getImageData(0, 0, 1, 1);\n\n    padColorArr = _ctx$getImageData.data;\n    if (!padColorArr[3]) padColorArr = null;\n  }\n\n  var height = fontSize + 2 * pad;\n  var font = [fontStyle, fontSize + \"px\", fontFamily].filter(Boolean).join(' ');\n\n  var resetContext = function resetContext() {\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.font = font;\n  };\n\n  resetContext();\n  var width = Math.ceil(ctx.measureText(text).width) + 2 * pad;\n  canvas.width = width;\n  canvas.height = height;\n  resetContext();\n\n  var fillText = function fillText() {\n    ctx.fillStyle = color || COLOR_BLACK;\n    ctx.fillText(text, width / 2, height / 2);\n  };\n\n  if (mode === 1) {\n    ctx.fillStyle = padColor;\n    ctx.fillRect(0, 0, width, height);\n    fillText();\n  } else {\n    fillText();\n\n    if (padColorArr) {\n      (function () {\n        var imageData = ctx.getImageData(0, 0, width, height);\n        var data = imageData.data;\n        var total = width * height;\n        var padded = [];\n        var offset = 0;\n\n        var _loop = function _loop(loop) {\n          var current = [];\n          var unique = {};\n          padded[offset] = current;\n          offset = 1 - offset;\n          var last = padded[offset];\n\n          if (!last) {\n            last = [];\n\n            for (var i = 0; i < total; i += 1) {\n              last.push(i);\n            }\n          }\n\n          last.forEach(function (i) {\n            if (data[4 * i + 3]) {\n              [i % width ? i - 1 : -1, (i + 1) % width ? i + 1 : -1, i - width, i + width].forEach(function (j) {\n                var k = 4 * j;\n\n                if (k >= 0 && k <= data.length && !unique[j]) {\n                  unique[j] = 1;\n                  current.push(j);\n                }\n              });\n            }\n          });\n          current.forEach(function (i) {\n            var j = 4 * i;\n\n            if (!data[j + 3]) {\n              for (var k = 0; k < 4; k += 1) {\n                data[j + k] = padColorArr[k];\n              }\n            }\n          });\n        };\n\n        for (var loop = 0; loop < pad; loop += 1) {\n          _loop();\n        }\n\n        ctx.putImageData(imageData, 0, 0);\n      })();\n    }\n  }\n\n  return canvas;\n}\n\nvar effects = {\n  \"default\": renderDefault,\n  round: renderRound,\n  fusion: renderFusion,\n  spot: renderSpot\n};\n\nfunction renderDefault(_ref) {\n  var foreground = _ref.foreground,\n      cellSize = _ref.cellSize,\n      isDark = _ref.isDark,\n      count = _ref.count;\n  var getCanvas = helpers.getCanvas,\n      drawCanvas = helpers.drawCanvas;\n  var width = cellSize * count;\n  var canvasMask = getCanvas(width);\n  var context = canvasMask.getContext('2d');\n  context.fillStyle = COLOR_BLACK;\n  drawCells({\n    cellSize: cellSize,\n    count: count\n  }, function (_ref2) {\n    var i = _ref2.i,\n        j = _ref2.j,\n        x = _ref2.x,\n        y = _ref2.y;\n\n    if (isDark(i, j)) {\n      context.fillRect(x, y, cellSize, cellSize);\n    }\n  });\n  var canvasFg = getCanvas(width);\n  drawCanvas(canvasFg, foreground, {\n    cellSize: cellSize\n  });\n  var ctx = canvasFg.getContext('2d');\n  ctx.globalCompositeOperation = 'destination-in';\n  ctx.drawImage(canvasMask, 0, 0);\n  return canvasFg;\n}\n\nfunction renderRound(_ref3, maskOptions) {\n  var foreground = _ref3.foreground,\n      cellSize = _ref3.cellSize,\n      isDark = _ref3.isDark,\n      count = _ref3.count;\n  var getCanvas = helpers.getCanvas,\n      drawCanvas = helpers.drawCanvas;\n  var width = cellSize * count;\n  var canvasMask = getCanvas(width);\n  var _maskOptions$value = maskOptions.value,\n      value = _maskOptions$value === void 0 ? 1 : _maskOptions$value;\n  var radius = value * cellSize / 2;\n  var context = canvasMask.getContext('2d');\n  context.fillStyle = COLOR_BLACK;\n  drawCells({\n    cellSize: cellSize,\n    count: count\n  }, function (_ref4) {\n    var i = _ref4.i,\n        j = _ref4.j,\n        x = _ref4.x,\n        y = _ref4.y;\n\n    if (isDark(i, j)) {\n      context.beginPath();\n      context.moveTo(x + 0.5 * cellSize, y);\n      drawCorner(context, x + cellSize, y, x + cellSize, y + 0.5 * cellSize, radius);\n      drawCorner(context, x + cellSize, y + cellSize, x + 0.5 * cellSize, y + cellSize, radius);\n      drawCorner(context, x, y + cellSize, x, y + 0.5 * cellSize, radius);\n      drawCorner(context, x, y, x + 0.5 * cellSize, y, radius); // context.closePath();\n\n      context.fill();\n    }\n  });\n  var canvasFg = getCanvas(width);\n  drawCanvas(canvasFg, foreground, {\n    cellSize: cellSize\n  });\n  var ctx = canvasFg.getContext('2d');\n  ctx.globalCompositeOperation = 'destination-in';\n  ctx.drawImage(canvasMask, 0, 0);\n  return canvasFg;\n}\n\nfunction renderFusion(_ref5, maskOptions) {\n  var foreground = _ref5.foreground,\n      cellSize = _ref5.cellSize,\n      isDark = _ref5.isDark,\n      count = _ref5.count;\n  var getCanvas = helpers.getCanvas,\n      drawCanvas = helpers.drawCanvas;\n  var width = cellSize * count;\n  var canvasMask = getCanvas(width);\n  var context = canvasMask.getContext('2d');\n  context.fillStyle = COLOR_BLACK;\n  var _maskOptions$value2 = maskOptions.value,\n      value = _maskOptions$value2 === void 0 ? 1 : _maskOptions$value2;\n  var radius = value * cellSize / 2;\n  drawCells({\n    cellSize: cellSize,\n    count: count\n  }, function (_ref6) {\n    var i = _ref6.i,\n        j = _ref6.j,\n        x = _ref6.x,\n        y = _ref6.y;\n    var corners = [0, 0, 0, 0]; // NW, NE, SE, SW\n\n    if (isDark(i - 1, j)) {\n      corners[0] += 1;\n      corners[1] += 1;\n    }\n\n    if (isDark(i + 1, j)) {\n      corners[2] += 1;\n      corners[3] += 1;\n    }\n\n    if (isDark(i, j - 1)) {\n      corners[0] += 1;\n      corners[3] += 1;\n    }\n\n    if (isDark(i, j + 1)) {\n      corners[1] += 1;\n      corners[2] += 1;\n    }\n\n    if (isDark(i, j)) {\n      if (isDark(i - 1, j - 1)) corners[0] += 1;\n      if (isDark(i - 1, j + 1)) corners[1] += 1;\n      if (isDark(i + 1, j + 1)) corners[2] += 1;\n      if (isDark(i + 1, j - 1)) corners[3] += 1;\n      context.beginPath();\n      context.moveTo(x + 0.5 * cellSize, y);\n      drawCorner(context, x + cellSize, y, x + cellSize, y + 0.5 * cellSize, corners[1] ? 0 : radius);\n      drawCorner(context, x + cellSize, y + cellSize, x + 0.5 * cellSize, y + cellSize, corners[2] ? 0 : radius);\n      drawCorner(context, x, y + cellSize, x, y + 0.5 * cellSize, corners[3] ? 0 : radius);\n      drawCorner(context, x, y, x + 0.5 * cellSize, y, corners[0] ? 0 : radius); // context.closePath();\n\n      context.fill();\n    } else {\n      if (corners[0] === 2) {\n        fillCorner(context, x, y + 0.5 * cellSize, x, y, x + 0.5 * cellSize, y, radius);\n      }\n\n      if (corners[1] === 2) {\n        fillCorner(context, x + 0.5 * cellSize, y, x + cellSize, y, x + cellSize, y + 0.5 * cellSize, radius);\n      }\n\n      if (corners[2] === 2) {\n        fillCorner(context, x + cellSize, y + 0.5 * cellSize, x + cellSize, y + cellSize, x + 0.5 * cellSize, y + cellSize, radius);\n      }\n\n      if (corners[3] === 2) {\n        fillCorner(context, x + 0.5 * cellSize, y + cellSize, x, y + cellSize, x, y + 0.5 * cellSize, radius);\n      }\n    }\n  });\n  var canvasFg = getCanvas(width);\n  drawCanvas(canvasFg, foreground, {\n    cellSize: cellSize\n  });\n  var ctx = canvasFg.getContext('2d');\n  ctx.globalCompositeOperation = 'destination-in';\n  ctx.drawImage(canvasMask, 0, 0);\n  return canvasFg;\n}\n\nfunction renderSpot(_ref7, maskOptions) {\n  var foreground = _ref7.foreground,\n      cellSize = _ref7.cellSize,\n      isDark = _ref7.isDark,\n      count = _ref7.count;\n  var getCanvas = helpers.getCanvas,\n      drawCanvas = helpers.drawCanvas;\n  var width = cellSize * count;\n  var canvasMask = getCanvas(width);\n  var value = maskOptions.value,\n      _maskOptions$foregrou = maskOptions.foregroundLight,\n      foregroundLight = _maskOptions$foregrou === void 0 ? COLOR_WHITE : _maskOptions$foregrou;\n  var context = canvasMask.getContext('2d');\n  var canvasLayer = getCanvas(width);\n  var canvasFg = getCanvas(width);\n  var ctxLayer = canvasLayer.getContext('2d');\n  [{\n    dark: true,\n    foreground: foreground\n  }, {\n    dark: false,\n    foreground: foregroundLight\n  }].forEach(function (item) {\n    context.fillStyle = COLOR_BLACK;\n    context.clearRect(0, 0, width, width);\n    drawCells({\n      cellSize: cellSize,\n      count: count\n    }, function (_ref8) {\n      var i = _ref8.i,\n          j = _ref8.j,\n          x = _ref8.x,\n          y = _ref8.y;\n\n      if (isDark(i, j) ^ +!item.dark) {\n        var fillSize;\n\n        if (i <= 7 && j <= 7 || i <= 7 && count - j - 1 <= 7 || count - i - 1 <= 7 && j <= 7 || i + 5 <= count && i + 9 >= count && j + 5 <= count && j + 9 >= count || i === 7 || j === 7) {\n          fillSize = 1 - 0.1 * value;\n        } else {\n          fillSize = 0.25;\n        }\n\n        var offset = (1 - fillSize) / 2;\n        context.fillRect(x + offset * cellSize, y + offset * cellSize, fillSize * cellSize, fillSize * cellSize);\n      }\n    });\n    drawCanvas(canvasLayer, item.foreground, {\n      cellSize: cellSize,\n      context: ctxLayer\n    });\n    ctxLayer.globalCompositeOperation = 'destination-in';\n    ctxLayer.drawImage(canvasMask, 0, 0);\n    drawCanvas(canvasFg, canvasLayer, {\n      cellSize: cellSize,\n      clear: false\n    });\n  });\n  return canvasFg;\n}\n\nfunction drawCells(_ref9, drawEach) {\n  var cellSize = _ref9.cellSize,\n      count = _ref9.count;\n\n  for (var i = 0; i < count; i += 1) {\n    for (var j = 0; j < count; j += 1) {\n      var x = j * cellSize;\n      var y = i * cellSize;\n      drawEach({\n        i: i,\n        j: j,\n        x: x,\n        y: y\n      });\n    }\n  }\n}\n\nfunction drawCorner(ctx, cornerX, cornerY, x, y, r) {\n  if (r) {\n    ctx.arcTo(cornerX, cornerY, x, y, r);\n  } else {\n    ctx.lineTo(cornerX, cornerY);\n    ctx.lineTo(x, y);\n  }\n}\n\nfunction fillCorner(context, startX, startY, cornerX, cornerY, destX, destY, radius) {\n  context.beginPath();\n  context.moveTo(startX, startY);\n  drawCorner(context, cornerX, cornerY, destX, destY, radius);\n  context.lineTo(cornerX, cornerY);\n  context.lineTo(startX, startY); // context.closePath();\n\n  context.fill();\n}\n\n// Enable UTF_8 support\nqrcode.stringToBytes = qrcode.stringToBytesFuncs['UTF-8'];\nvar DEFAULTS = {\n  background: 'white',\n  foreground: 'black',\n  typeNumber: 0,\n  correctLevel: 'L',\n  data: '',\n  padding: 0\n};\n\nvar QRCanvasRenderer = /*#__PURE__*/function () {\n  function QRCanvasRenderer(options) {\n    var _this = this;\n\n    this.options = _extends({}, DEFAULTS);\n    this.cache = {};\n\n    this.isDark = function (i, j) {\n      var _this$cache = _this.cache,\n          qr = _this$cache.qr,\n          count = _this$cache.count;\n      if (i < 0 || i >= count || j < 0 || j >= count) return false;\n      return qr.isDark(i, j);\n    };\n\n    this.setOptions(options);\n  }\n\n  var _proto = QRCanvasRenderer.prototype;\n\n  _proto.render = function render(canvas, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this$options = this.options,\n        background = _this$options.background,\n        foreground = _this$options.foreground,\n        padding = _this$options.padding,\n        effect = _this$options.effect,\n        logo = _this$options.logo;\n    var onRender = effects[effect.type] || effects[\"default\"];\n    var count = this.cache.count;\n    var drawCanvas = helpers.drawCanvas;\n    var _config = config,\n        size = _config.size;\n    var canvasOut;\n    var canvasBg;\n    var canvasFg; // Prepare output canvas, resize it if cellSize or size is provided.\n\n    {\n      var _config2 = config,\n          cellSize = _config2.cellSize;\n      if (!canvas && !cellSize && !size) cellSize = 6;\n      if (cellSize) size = count * cellSize;\n\n      if (size) {\n        canvasOut = helpers.updateCanvas(canvas, size);\n      } else {\n        size = canvas.width;\n        canvasOut = canvas;\n      }\n    } // Create foreground and background layers on canvas\n\n    {\n      var _cellSize = Math.ceil(size / count);\n\n      var sketchSize = _cellSize * count;\n      canvasBg = helpers.getCanvas(_cellSize * count);\n      drawCanvas(canvasBg, background, {\n        cellSize: _cellSize\n      });\n      canvasFg = onRender(_extends({\n        foreground: foreground,\n        cellSize: _cellSize,\n        isDark: this.isDark\n      }, this.cache), this.options.effect); // draw logo\n\n      if (logo) {\n        var logoLayer = _extends({}, logo);\n\n        if (!logo.w && !logo.h && !logo.cols && !logo.rows) {\n          var _ref = logo.image,\n              width = _ref.width,\n              height = _ref.height;\n          var imageRatio = width / height;\n          var posRatio = Math.min((count - 18) / count, 0.38);\n          var h = Math.min(height, sketchSize * posRatio, sketchSize * posRatio / imageRatio);\n          var w = h * imageRatio;\n          var x = (sketchSize - w) / 2;\n          var y = (sketchSize - h) / 2;\n          logoLayer.w = w;\n          logoLayer.h = h;\n          logoLayer.x = x;\n          logoLayer.y = y;\n        }\n\n        drawCanvas(canvasFg, logoLayer, {\n          clear: false\n        });\n      }\n    } // Combine the layers\n\n    var contentSize = size - padding - padding;\n    drawCanvas(canvasOut, [{\n      image: canvasBg\n    }, {\n      image: canvasFg,\n      x: padding,\n      y: padding,\n      w: contentSize,\n      h: contentSize\n    }]);\n    return canvasOut;\n  };\n\n  _proto.setOptions = function setOptions(options) {\n    this.options = _extends({}, this.options, {}, options);\n    this.normalizeEffect();\n    this.normalizeLogo();\n    var _this$options2 = this.options,\n        typeNumber = _this$options2.typeNumber,\n        data = _this$options2.data,\n        logo = _this$options2.logo; // L / M / Q / H\n\n    var correctLevel = this.options.correctLevel;\n    if (logo && ['Q', 'H'].indexOf(correctLevel) < 0) correctLevel = 'H';\n    var qr = qrcode(typeNumber, correctLevel);\n    qr.addData(data || '');\n    qr.make();\n    var count = qr.getModuleCount();\n    this.cache = {\n      qr: qr,\n      count: count\n    };\n  };\n\n  _proto.normalizeEffect = function normalizeEffect() {\n    var effect = this.options.effect;\n\n    if (typeof effect === 'string') {\n      effect = {\n        type: effect\n      };\n    }\n\n    this.options.effect = effect || {};\n  };\n\n  _proto.normalizeLogo = function normalizeLogo() {\n    var isDrawable = helpers.isDrawable,\n        drawText = helpers.drawText;\n    var logo = this.options.logo;\n\n    if (logo) {\n      if (isDrawable(logo)) {\n        logo = {\n          image: logo\n        };\n      } else if (!isDrawable(logo.image)) {\n        if (typeof logo === 'string') {\n          logo = {\n            text: logo\n          };\n        }\n\n        if (typeof logo.text === 'string') {\n          logo = {\n            image: drawText(logo.text, logo.options)\n          };\n        } else {\n          logo = null;\n        }\n      }\n    }\n\n    this.options.logo = logo;\n  };\n\n  return QRCanvasRenderer;\n}();\n\nfunction qrcanvas(options) {\n  var canvas = options.canvas,\n      size = options.size,\n      cellSize = options.cellSize,\n      rest = _objectWithoutPropertiesLoose(options, [\"canvas\", \"size\", \"cellSize\"]);\n\n  var renderer = new QRCanvasRenderer(rest);\n  return renderer.render(canvas, {\n    size: size,\n    cellSize: cellSize\n  });\n}\n\nfunction setCanvasModule(canvasModule) {\n  var Canvas = canvasModule.Canvas,\n      Image = canvasModule.Image,\n      createCanvas = canvasModule.createCanvas;\n\n  var isCanvas = function isCanvas(el) {\n    return el instanceof Canvas;\n  };\n\n  var isDrawable = function isDrawable(el) {\n    return isCanvas(el) || el instanceof Image;\n  };\n\n  helpers.createCanvas = createCanvas;\n  helpers.isCanvas = isCanvas;\n  helpers.isDrawable = isDrawable;\n}\n\nexport { effects, helpers, qrcanvas, setCanvasModule };\n","//---------------------------------------------------------------------\n//\n// QR Code Generator for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//  http://www.opensource.org/licenses/mit-license.php\n//\n// The word 'QR Code' is registered trademark of\n// DENSO WAVE INCORPORATED\n//  http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\n\nvar qrcode = function() {\n\n  //---------------------------------------------------------------------\n  // qrcode\n  //---------------------------------------------------------------------\n\n  /**\n   * qrcode\n   * @param typeNumber 1 to 40\n   * @param errorCorrectionLevel 'L','M','Q','H'\n   */\n  var qrcode = function(typeNumber, errorCorrectionLevel) {\n\n    var PAD0 = 0xEC;\n    var PAD1 = 0x11;\n\n    var _typeNumber = typeNumber;\n    var _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel];\n    var _modules = null;\n    var _moduleCount = 0;\n    var _dataCache = null;\n    var _dataList = [];\n\n    var _this = {};\n\n    var makeImpl = function(test, maskPattern) {\n\n      _moduleCount = _typeNumber * 4 + 17;\n      _modules = function(moduleCount) {\n        var modules = new Array(moduleCount);\n        for (var row = 0; row < moduleCount; row += 1) {\n          modules[row] = new Array(moduleCount);\n          for (var col = 0; col < moduleCount; col += 1) {\n            modules[row][col] = null;\n          }\n        }\n        return modules;\n      }(_moduleCount);\n\n      setupPositionProbePattern(0, 0);\n      setupPositionProbePattern(_moduleCount - 7, 0);\n      setupPositionProbePattern(0, _moduleCount - 7);\n      setupPositionAdjustPattern();\n      setupTimingPattern();\n      setupTypeInfo(test, maskPattern);\n\n      if (_typeNumber >= 7) {\n        setupTypeNumber(test);\n      }\n\n      if (_dataCache == null) {\n        _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);\n      }\n\n      mapData(_dataCache, maskPattern);\n    };\n\n    var setupPositionProbePattern = function(row, col) {\n\n      for (var r = -1; r <= 7; r += 1) {\n\n        if (row + r <= -1 || _moduleCount <= row + r) continue;\n\n        for (var c = -1; c <= 7; c += 1) {\n\n          if (col + c <= -1 || _moduleCount <= col + c) continue;\n\n          if ( (0 <= r && r <= 6 && (c == 0 || c == 6) )\n              || (0 <= c && c <= 6 && (r == 0 || r == 6) )\n              || (2 <= r && r <= 4 && 2 <= c && c <= 4) ) {\n            _modules[row + r][col + c] = true;\n          } else {\n            _modules[row + r][col + c] = false;\n          }\n        }\n      }\n    };\n\n    var getBestMaskPattern = function() {\n\n      var minLostPoint = 0;\n      var pattern = 0;\n\n      for (var i = 0; i < 8; i += 1) {\n\n        makeImpl(true, i);\n\n        var lostPoint = QRUtil.getLostPoint(_this);\n\n        if (i == 0 || minLostPoint > lostPoint) {\n          minLostPoint = lostPoint;\n          pattern = i;\n        }\n      }\n\n      return pattern;\n    };\n\n    var setupTimingPattern = function() {\n\n      for (var r = 8; r < _moduleCount - 8; r += 1) {\n        if (_modules[r][6] != null) {\n          continue;\n        }\n        _modules[r][6] = (r % 2 == 0);\n      }\n\n      for (var c = 8; c < _moduleCount - 8; c += 1) {\n        if (_modules[6][c] != null) {\n          continue;\n        }\n        _modules[6][c] = (c % 2 == 0);\n      }\n    };\n\n    var setupPositionAdjustPattern = function() {\n\n      var pos = QRUtil.getPatternPosition(_typeNumber);\n\n      for (var i = 0; i < pos.length; i += 1) {\n\n        for (var j = 0; j < pos.length; j += 1) {\n\n          var row = pos[i];\n          var col = pos[j];\n\n          if (_modules[row][col] != null) {\n            continue;\n          }\n\n          for (var r = -2; r <= 2; r += 1) {\n\n            for (var c = -2; c <= 2; c += 1) {\n\n              if (r == -2 || r == 2 || c == -2 || c == 2\n                  || (r == 0 && c == 0) ) {\n                _modules[row + r][col + c] = true;\n              } else {\n                _modules[row + r][col + c] = false;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    var setupTypeNumber = function(test) {\n\n      var bits = QRUtil.getBCHTypeNumber(_typeNumber);\n\n      for (var i = 0; i < 18; i += 1) {\n        var mod = (!test && ( (bits >> i) & 1) == 1);\n        _modules[Math.floor(i / 3)][i % 3 + _moduleCount - 8 - 3] = mod;\n      }\n\n      for (var i = 0; i < 18; i += 1) {\n        var mod = (!test && ( (bits >> i) & 1) == 1);\n        _modules[i % 3 + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n      }\n    };\n\n    var setupTypeInfo = function(test, maskPattern) {\n\n      var data = (_errorCorrectionLevel << 3) | maskPattern;\n      var bits = QRUtil.getBCHTypeInfo(data);\n\n      // vertical\n      for (var i = 0; i < 15; i += 1) {\n\n        var mod = (!test && ( (bits >> i) & 1) == 1);\n\n        if (i < 6) {\n          _modules[i][8] = mod;\n        } else if (i < 8) {\n          _modules[i + 1][8] = mod;\n        } else {\n          _modules[_moduleCount - 15 + i][8] = mod;\n        }\n      }\n\n      // horizontal\n      for (var i = 0; i < 15; i += 1) {\n\n        var mod = (!test && ( (bits >> i) & 1) == 1);\n\n        if (i < 8) {\n          _modules[8][_moduleCount - i - 1] = mod;\n        } else if (i < 9) {\n          _modules[8][15 - i - 1 + 1] = mod;\n        } else {\n          _modules[8][15 - i - 1] = mod;\n        }\n      }\n\n      // fixed module\n      _modules[_moduleCount - 8][8] = (!test);\n    };\n\n    var mapData = function(data, maskPattern) {\n\n      var inc = -1;\n      var row = _moduleCount - 1;\n      var bitIndex = 7;\n      var byteIndex = 0;\n      var maskFunc = QRUtil.getMaskFunction(maskPattern);\n\n      for (var col = _moduleCount - 1; col > 0; col -= 2) {\n\n        if (col == 6) col -= 1;\n\n        while (true) {\n\n          for (var c = 0; c < 2; c += 1) {\n\n            if (_modules[row][col - c] == null) {\n\n              var dark = false;\n\n              if (byteIndex < data.length) {\n                dark = ( ( (data[byteIndex] >>> bitIndex) & 1) == 1);\n              }\n\n              var mask = maskFunc(row, col - c);\n\n              if (mask) {\n                dark = !dark;\n              }\n\n              _modules[row][col - c] = dark;\n              bitIndex -= 1;\n\n              if (bitIndex == -1) {\n                byteIndex += 1;\n                bitIndex = 7;\n              }\n            }\n          }\n\n          row += inc;\n\n          if (row < 0 || _moduleCount <= row) {\n            row -= inc;\n            inc = -inc;\n            break;\n          }\n        }\n      }\n    };\n\n    var createBytes = function(buffer, rsBlocks) {\n\n      var offset = 0;\n\n      var maxDcCount = 0;\n      var maxEcCount = 0;\n\n      var dcdata = new Array(rsBlocks.length);\n      var ecdata = new Array(rsBlocks.length);\n\n      for (var r = 0; r < rsBlocks.length; r += 1) {\n\n        var dcCount = rsBlocks[r].dataCount;\n        var ecCount = rsBlocks[r].totalCount - dcCount;\n\n        maxDcCount = Math.max(maxDcCount, dcCount);\n        maxEcCount = Math.max(maxEcCount, ecCount);\n\n        dcdata[r] = new Array(dcCount);\n\n        for (var i = 0; i < dcdata[r].length; i += 1) {\n          dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset];\n        }\n        offset += dcCount;\n\n        var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n        var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);\n\n        var modPoly = rawPoly.mod(rsPoly);\n        ecdata[r] = new Array(rsPoly.getLength() - 1);\n        for (var i = 0; i < ecdata[r].length; i += 1) {\n          var modIndex = i + modPoly.getLength() - ecdata[r].length;\n          ecdata[r][i] = (modIndex >= 0)? modPoly.getAt(modIndex) : 0;\n        }\n      }\n\n      var totalCodeCount = 0;\n      for (var i = 0; i < rsBlocks.length; i += 1) {\n        totalCodeCount += rsBlocks[i].totalCount;\n      }\n\n      var data = new Array(totalCodeCount);\n      var index = 0;\n\n      for (var i = 0; i < maxDcCount; i += 1) {\n        for (var r = 0; r < rsBlocks.length; r += 1) {\n          if (i < dcdata[r].length) {\n            data[index] = dcdata[r][i];\n            index += 1;\n          }\n        }\n      }\n\n      for (var i = 0; i < maxEcCount; i += 1) {\n        for (var r = 0; r < rsBlocks.length; r += 1) {\n          if (i < ecdata[r].length) {\n            data[index] = ecdata[r][i];\n            index += 1;\n          }\n        }\n      }\n\n      return data;\n    };\n\n    var createData = function(typeNumber, errorCorrectionLevel, dataList) {\n\n      var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectionLevel);\n\n      var buffer = qrBitBuffer();\n\n      for (var i = 0; i < dataList.length; i += 1) {\n        var data = dataList[i];\n        buffer.put(data.getMode(), 4);\n        buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber) );\n        data.write(buffer);\n      }\n\n      // calc num max data.\n      var totalDataCount = 0;\n      for (var i = 0; i < rsBlocks.length; i += 1) {\n        totalDataCount += rsBlocks[i].dataCount;\n      }\n\n      if (buffer.getLengthInBits() > totalDataCount * 8) {\n        throw 'code length overflow. ('\n          + buffer.getLengthInBits()\n          + '>'\n          + totalDataCount * 8\n          + ')';\n      }\n\n      // end code\n      if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n        buffer.put(0, 4);\n      }\n\n      // padding\n      while (buffer.getLengthInBits() % 8 != 0) {\n        buffer.putBit(false);\n      }\n\n      // padding\n      while (true) {\n\n        if (buffer.getLengthInBits() >= totalDataCount * 8) {\n          break;\n        }\n        buffer.put(PAD0, 8);\n\n        if (buffer.getLengthInBits() >= totalDataCount * 8) {\n          break;\n        }\n        buffer.put(PAD1, 8);\n      }\n\n      return createBytes(buffer, rsBlocks);\n    };\n\n    _this.addData = function(data, mode) {\n\n      mode = mode || 'Byte';\n\n      var newData = null;\n\n      switch(mode) {\n      case 'Numeric' :\n        newData = qrNumber(data);\n        break;\n      case 'Alphanumeric' :\n        newData = qrAlphaNum(data);\n        break;\n      case 'Byte' :\n        newData = qr8BitByte(data);\n        break;\n      case 'Kanji' :\n        newData = qrKanji(data);\n        break;\n      default :\n        throw 'mode:' + mode;\n      }\n\n      _dataList.push(newData);\n      _dataCache = null;\n    };\n\n    _this.isDark = function(row, col) {\n      if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {\n        throw row + ',' + col;\n      }\n      return _modules[row][col];\n    };\n\n    _this.getModuleCount = function() {\n      return _moduleCount;\n    };\n\n    _this.make = function() {\n      if (_typeNumber < 1) {\n        var typeNumber = 1;\n\n        for (; typeNumber < 40; typeNumber++) {\n          var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, _errorCorrectionLevel);\n          var buffer = qrBitBuffer();\n\n          for (var i = 0; i < _dataList.length; i++) {\n            var data = _dataList[i];\n            buffer.put(data.getMode(), 4);\n            buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber) );\n            data.write(buffer);\n          }\n\n          var totalDataCount = 0;\n          for (var i = 0; i < rsBlocks.length; i++) {\n            totalDataCount += rsBlocks[i].dataCount;\n          }\n\n          if (buffer.getLengthInBits() <= totalDataCount * 8) {\n            break;\n          }\n        }\n\n        _typeNumber = typeNumber;\n      }\n\n      makeImpl(false, getBestMaskPattern() );\n    };\n\n    _this.createTableTag = function(cellSize, margin) {\n\n      cellSize = cellSize || 2;\n      margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n\n      var qrHtml = '';\n\n      qrHtml += '<table style=\"';\n      qrHtml += ' border-width: 0px; border-style: none;';\n      qrHtml += ' border-collapse: collapse;';\n      qrHtml += ' padding: 0px; margin: ' + margin + 'px;';\n      qrHtml += '\">';\n      qrHtml += '<tbody>';\n\n      for (var r = 0; r < _this.getModuleCount(); r += 1) {\n\n        qrHtml += '<tr>';\n\n        for (var c = 0; c < _this.getModuleCount(); c += 1) {\n          qrHtml += '<td style=\"';\n          qrHtml += ' border-width: 0px; border-style: none;';\n          qrHtml += ' border-collapse: collapse;';\n          qrHtml += ' padding: 0px; margin: 0px;';\n          qrHtml += ' width: ' + cellSize + 'px;';\n          qrHtml += ' height: ' + cellSize + 'px;';\n          qrHtml += ' background-color: ';\n          qrHtml += _this.isDark(r, c)? '#000000' : '#ffffff';\n          qrHtml += ';';\n          qrHtml += '\"/>';\n        }\n\n        qrHtml += '</tr>';\n      }\n\n      qrHtml += '</tbody>';\n      qrHtml += '</table>';\n\n      return qrHtml;\n    };\n\n    _this.createSvgTag = function(cellSize, margin, alt, title) {\n\n      var opts = {};\n      if (typeof arguments[0] == 'object') {\n        // Called by options.\n        opts = arguments[0];\n        // overwrite cellSize and margin.\n        cellSize = opts.cellSize;\n        margin = opts.margin;\n        alt = opts.alt;\n        title = opts.title;\n      }\n\n      cellSize = cellSize || 2;\n      margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n\n      // Compose alt property surrogate\n      alt = (typeof alt === 'string') ? {text: alt} : alt || {};\n      alt.text = alt.text || null;\n      alt.id = (alt.text) ? alt.id || 'qrcode-description' : null;\n\n      // Compose title property surrogate\n      title = (typeof title === 'string') ? {text: title} : title || {};\n      title.text = title.text || null;\n      title.id = (title.text) ? title.id || 'qrcode-title' : null;\n\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var c, mc, r, mr, qrSvg='', rect;\n\n      rect = 'l' + cellSize + ',0 0,' + cellSize +\n        ' -' + cellSize + ',0 0,-' + cellSize + 'z ';\n\n      qrSvg += '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"';\n      qrSvg += !opts.scalable ? ' width=\"' + size + 'px\" height=\"' + size + 'px\"' : '';\n      qrSvg += ' viewBox=\"0 0 ' + size + ' ' + size + '\" ';\n      qrSvg += ' preserveAspectRatio=\"xMinYMin meet\"';\n      qrSvg += (title.text || alt.text) ? ' role=\"img\" aria-labelledby=\"' +\n          escapeXml([title.id, alt.id].join(' ').trim() ) + '\"' : '';\n      qrSvg += '>';\n      qrSvg += (title.text) ? '<title id=\"' + escapeXml(title.id) + '\">' +\n          escapeXml(title.text) + '</title>' : '';\n      qrSvg += (alt.text) ? '<description id=\"' + escapeXml(alt.id) + '\">' +\n          escapeXml(alt.text) + '</description>' : '';\n      qrSvg += '<rect width=\"100%\" height=\"100%\" fill=\"white\" cx=\"0\" cy=\"0\"/>';\n      qrSvg += '<path d=\"';\n\n      for (r = 0; r < _this.getModuleCount(); r += 1) {\n        mr = r * cellSize + margin;\n        for (c = 0; c < _this.getModuleCount(); c += 1) {\n          if (_this.isDark(r, c) ) {\n            mc = c*cellSize+margin;\n            qrSvg += 'M' + mc + ',' + mr + rect;\n          }\n        }\n      }\n\n      qrSvg += '\" stroke=\"transparent\" fill=\"black\"/>';\n      qrSvg += '</svg>';\n\n      return qrSvg;\n    };\n\n    _this.createDataURL = function(cellSize, margin) {\n\n      cellSize = cellSize || 2;\n      margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var min = margin;\n      var max = size - margin;\n\n      return createDataURL(size, size, function(x, y) {\n        if (min <= x && x < max && min <= y && y < max) {\n          var c = Math.floor( (x - min) / cellSize);\n          var r = Math.floor( (y - min) / cellSize);\n          return _this.isDark(r, c)? 0 : 1;\n        } else {\n          return 1;\n        }\n      } );\n    };\n\n    _this.createImgTag = function(cellSize, margin, alt) {\n\n      cellSize = cellSize || 2;\n      margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n\n      var img = '';\n      img += '<img';\n      img += '\\u0020src=\"';\n      img += _this.createDataURL(cellSize, margin);\n      img += '\"';\n      img += '\\u0020width=\"';\n      img += size;\n      img += '\"';\n      img += '\\u0020height=\"';\n      img += size;\n      img += '\"';\n      if (alt) {\n        img += '\\u0020alt=\"';\n        img += escapeXml(alt);\n        img += '\"';\n      }\n      img += '/>';\n\n      return img;\n    };\n\n    var escapeXml = function(s) {\n      var escaped = '';\n      for (var i = 0; i < s.length; i += 1) {\n        var c = s.charAt(i);\n        switch(c) {\n        case '<': escaped += '&lt;'; break;\n        case '>': escaped += '&gt;'; break;\n        case '&': escaped += '&amp;'; break;\n        case '\"': escaped += '&quot;'; break;\n        default : escaped += c; break;\n        }\n      }\n      return escaped;\n    };\n\n    var _createHalfASCII = function(margin) {\n      var cellSize = 1;\n      margin = (typeof margin == 'undefined')? cellSize * 2 : margin;\n\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var min = margin;\n      var max = size - margin;\n\n      var y, x, r1, r2, p;\n\n      var blocks = {\n        '██': '█',\n        '█ ': '▀',\n        ' █': '▄',\n        '  ': ' '\n      };\n\n      var blocksLastLineNoMargin = {\n        '██': '▀',\n        '█ ': '▀',\n        ' █': ' ',\n        '  ': ' '\n      };\n\n      var ascii = '';\n      for (y = 0; y < size; y += 2) {\n        r1 = Math.floor((y - min) / cellSize);\n        r2 = Math.floor((y + 1 - min) / cellSize);\n        for (x = 0; x < size; x += 1) {\n          p = '█';\n\n          if (min <= x && x < max && min <= y && y < max && _this.isDark(r1, Math.floor((x - min) / cellSize))) {\n            p = ' ';\n          }\n\n          if (min <= x && x < max && min <= y+1 && y+1 < max && _this.isDark(r2, Math.floor((x - min) / cellSize))) {\n            p += ' ';\n          }\n          else {\n            p += '█';\n          }\n\n          // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n          ascii += (margin < 1 && y+1 >= max) ? blocksLastLineNoMargin[p] : blocks[p];\n        }\n\n        ascii += '\\n';\n      }\n\n      if (size % 2 && margin > 0) {\n        return ascii.substring(0, ascii.length - size - 1) + Array(size+1).join('▀');\n      }\n\n      return ascii.substring(0, ascii.length-1);\n    };\n\n    _this.createASCII = function(cellSize, margin) {\n      cellSize = cellSize || 1;\n\n      if (cellSize < 2) {\n        return _createHalfASCII(margin);\n      }\n\n      cellSize -= 1;\n      margin = (typeof margin == 'undefined')? cellSize * 2 : margin;\n\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var min = margin;\n      var max = size - margin;\n\n      var y, x, r, p;\n\n      var white = Array(cellSize+1).join('██');\n      var black = Array(cellSize+1).join('  ');\n\n      var ascii = '';\n      var line = '';\n      for (y = 0; y < size; y += 1) {\n        r = Math.floor( (y - min) / cellSize);\n        line = '';\n        for (x = 0; x < size; x += 1) {\n          p = 1;\n\n          if (min <= x && x < max && min <= y && y < max && _this.isDark(r, Math.floor((x - min) / cellSize))) {\n            p = 0;\n          }\n\n          // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n          line += p ? white : black;\n        }\n\n        for (r = 0; r < cellSize; r += 1) {\n          ascii += line + '\\n';\n        }\n      }\n\n      return ascii.substring(0, ascii.length-1);\n    };\n\n    _this.renderTo2dContext = function(context, cellSize) {\n      cellSize = cellSize || 2;\n      var length = _this.getModuleCount();\n      for (var row = 0; row < length; row++) {\n        for (var col = 0; col < length; col++) {\n          context.fillStyle = _this.isDark(row, col) ? 'black' : 'white';\n          context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize);\n        }\n      }\n    }\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // qrcode.stringToBytes\n  //---------------------------------------------------------------------\n\n  qrcode.stringToBytesFuncs = {\n    'default' : function(s) {\n      var bytes = [];\n      for (var i = 0; i < s.length; i += 1) {\n        var c = s.charCodeAt(i);\n        bytes.push(c & 0xff);\n      }\n      return bytes;\n    }\n  };\n\n  qrcode.stringToBytes = qrcode.stringToBytesFuncs['default'];\n\n  //---------------------------------------------------------------------\n  // qrcode.createStringToBytes\n  //---------------------------------------------------------------------\n\n  /**\n   * @param unicodeData base64 string of byte array.\n   * [16bit Unicode],[16bit Bytes], ...\n   * @param numChars\n   */\n  qrcode.createStringToBytes = function(unicodeData, numChars) {\n\n    // create conversion map.\n\n    var unicodeMap = function() {\n\n      var bin = base64DecodeInputStream(unicodeData);\n      var read = function() {\n        var b = bin.read();\n        if (b == -1) throw 'eof';\n        return b;\n      };\n\n      var count = 0;\n      var unicodeMap = {};\n      while (true) {\n        var b0 = bin.read();\n        if (b0 == -1) break;\n        var b1 = read();\n        var b2 = read();\n        var b3 = read();\n        var k = String.fromCharCode( (b0 << 8) | b1);\n        var v = (b2 << 8) | b3;\n        unicodeMap[k] = v;\n        count += 1;\n      }\n      if (count != numChars) {\n        throw count + ' != ' + numChars;\n      }\n\n      return unicodeMap;\n    }();\n\n    var unknownChar = '?'.charCodeAt(0);\n\n    return function(s) {\n      var bytes = [];\n      for (var i = 0; i < s.length; i += 1) {\n        var c = s.charCodeAt(i);\n        if (c < 128) {\n          bytes.push(c);\n        } else {\n          var b = unicodeMap[s.charAt(i)];\n          if (typeof b == 'number') {\n            if ( (b & 0xff) == b) {\n              // 1byte\n              bytes.push(b);\n            } else {\n              // 2bytes\n              bytes.push(b >>> 8);\n              bytes.push(b & 0xff);\n            }\n          } else {\n            bytes.push(unknownChar);\n          }\n        }\n      }\n      return bytes;\n    };\n  };\n\n  //---------------------------------------------------------------------\n  // QRMode\n  //---------------------------------------------------------------------\n\n  var QRMode = {\n    MODE_NUMBER :    1 << 0,\n    MODE_ALPHA_NUM : 1 << 1,\n    MODE_8BIT_BYTE : 1 << 2,\n    MODE_KANJI :     1 << 3\n  };\n\n  //---------------------------------------------------------------------\n  // QRErrorCorrectionLevel\n  //---------------------------------------------------------------------\n\n  var QRErrorCorrectionLevel = {\n    L : 1,\n    M : 0,\n    Q : 3,\n    H : 2\n  };\n\n  //---------------------------------------------------------------------\n  // QRMaskPattern\n  //---------------------------------------------------------------------\n\n  var QRMaskPattern = {\n    PATTERN000 : 0,\n    PATTERN001 : 1,\n    PATTERN010 : 2,\n    PATTERN011 : 3,\n    PATTERN100 : 4,\n    PATTERN101 : 5,\n    PATTERN110 : 6,\n    PATTERN111 : 7\n  };\n\n  //---------------------------------------------------------------------\n  // QRUtil\n  //---------------------------------------------------------------------\n\n  var QRUtil = function() {\n\n    var PATTERN_POSITION_TABLE = [\n      [],\n      [6, 18],\n      [6, 22],\n      [6, 26],\n      [6, 30],\n      [6, 34],\n      [6, 22, 38],\n      [6, 24, 42],\n      [6, 26, 46],\n      [6, 28, 50],\n      [6, 30, 54],\n      [6, 32, 58],\n      [6, 34, 62],\n      [6, 26, 46, 66],\n      [6, 26, 48, 70],\n      [6, 26, 50, 74],\n      [6, 30, 54, 78],\n      [6, 30, 56, 82],\n      [6, 30, 58, 86],\n      [6, 34, 62, 90],\n      [6, 28, 50, 72, 94],\n      [6, 26, 50, 74, 98],\n      [6, 30, 54, 78, 102],\n      [6, 28, 54, 80, 106],\n      [6, 32, 58, 84, 110],\n      [6, 30, 58, 86, 114],\n      [6, 34, 62, 90, 118],\n      [6, 26, 50, 74, 98, 122],\n      [6, 30, 54, 78, 102, 126],\n      [6, 26, 52, 78, 104, 130],\n      [6, 30, 56, 82, 108, 134],\n      [6, 34, 60, 86, 112, 138],\n      [6, 30, 58, 86, 114, 142],\n      [6, 34, 62, 90, 118, 146],\n      [6, 30, 54, 78, 102, 126, 150],\n      [6, 24, 50, 76, 102, 128, 154],\n      [6, 28, 54, 80, 106, 132, 158],\n      [6, 32, 58, 84, 110, 136, 162],\n      [6, 26, 54, 82, 110, 138, 166],\n      [6, 30, 58, 86, 114, 142, 170]\n    ];\n    var G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);\n    var G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);\n    var G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);\n\n    var _this = {};\n\n    var getBCHDigit = function(data) {\n      var digit = 0;\n      while (data != 0) {\n        digit += 1;\n        data >>>= 1;\n      }\n      return digit;\n    };\n\n    _this.getBCHTypeInfo = function(data) {\n      var d = data << 10;\n      while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\n        d ^= (G15 << (getBCHDigit(d) - getBCHDigit(G15) ) );\n      }\n      return ( (data << 10) | d) ^ G15_MASK;\n    };\n\n    _this.getBCHTypeNumber = function(data) {\n      var d = data << 12;\n      while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\n        d ^= (G18 << (getBCHDigit(d) - getBCHDigit(G18) ) );\n      }\n      return (data << 12) | d;\n    };\n\n    _this.getPatternPosition = function(typeNumber) {\n      return PATTERN_POSITION_TABLE[typeNumber - 1];\n    };\n\n    _this.getMaskFunction = function(maskPattern) {\n\n      switch (maskPattern) {\n\n      case QRMaskPattern.PATTERN000 :\n        return function(i, j) { return (i + j) % 2 == 0; };\n      case QRMaskPattern.PATTERN001 :\n        return function(i, j) { return i % 2 == 0; };\n      case QRMaskPattern.PATTERN010 :\n        return function(i, j) { return j % 3 == 0; };\n      case QRMaskPattern.PATTERN011 :\n        return function(i, j) { return (i + j) % 3 == 0; };\n      case QRMaskPattern.PATTERN100 :\n        return function(i, j) { return (Math.floor(i / 2) + Math.floor(j / 3) ) % 2 == 0; };\n      case QRMaskPattern.PATTERN101 :\n        return function(i, j) { return (i * j) % 2 + (i * j) % 3 == 0; };\n      case QRMaskPattern.PATTERN110 :\n        return function(i, j) { return ( (i * j) % 2 + (i * j) % 3) % 2 == 0; };\n      case QRMaskPattern.PATTERN111 :\n        return function(i, j) { return ( (i * j) % 3 + (i + j) % 2) % 2 == 0; };\n\n      default :\n        throw 'bad maskPattern:' + maskPattern;\n      }\n    };\n\n    _this.getErrorCorrectPolynomial = function(errorCorrectLength) {\n      var a = qrPolynomial([1], 0);\n      for (var i = 0; i < errorCorrectLength; i += 1) {\n        a = a.multiply(qrPolynomial([1, QRMath.gexp(i)], 0) );\n      }\n      return a;\n    };\n\n    _this.getLengthInBits = function(mode, type) {\n\n      if (1 <= type && type < 10) {\n\n        // 1 - 9\n\n        switch(mode) {\n        case QRMode.MODE_NUMBER    : return 10;\n        case QRMode.MODE_ALPHA_NUM : return 9;\n        case QRMode.MODE_8BIT_BYTE : return 8;\n        case QRMode.MODE_KANJI     : return 8;\n        default :\n          throw 'mode:' + mode;\n        }\n\n      } else if (type < 27) {\n\n        // 10 - 26\n\n        switch(mode) {\n        case QRMode.MODE_NUMBER    : return 12;\n        case QRMode.MODE_ALPHA_NUM : return 11;\n        case QRMode.MODE_8BIT_BYTE : return 16;\n        case QRMode.MODE_KANJI     : return 10;\n        default :\n          throw 'mode:' + mode;\n        }\n\n      } else if (type < 41) {\n\n        // 27 - 40\n\n        switch(mode) {\n        case QRMode.MODE_NUMBER    : return 14;\n        case QRMode.MODE_ALPHA_NUM : return 13;\n        case QRMode.MODE_8BIT_BYTE : return 16;\n        case QRMode.MODE_KANJI     : return 12;\n        default :\n          throw 'mode:' + mode;\n        }\n\n      } else {\n        throw 'type:' + type;\n      }\n    };\n\n    _this.getLostPoint = function(qrcode) {\n\n      var moduleCount = qrcode.getModuleCount();\n\n      var lostPoint = 0;\n\n      // LEVEL1\n\n      for (var row = 0; row < moduleCount; row += 1) {\n        for (var col = 0; col < moduleCount; col += 1) {\n\n          var sameCount = 0;\n          var dark = qrcode.isDark(row, col);\n\n          for (var r = -1; r <= 1; r += 1) {\n\n            if (row + r < 0 || moduleCount <= row + r) {\n              continue;\n            }\n\n            for (var c = -1; c <= 1; c += 1) {\n\n              if (col + c < 0 || moduleCount <= col + c) {\n                continue;\n              }\n\n              if (r == 0 && c == 0) {\n                continue;\n              }\n\n              if (dark == qrcode.isDark(row + r, col + c) ) {\n                sameCount += 1;\n              }\n            }\n          }\n\n          if (sameCount > 5) {\n            lostPoint += (3 + sameCount - 5);\n          }\n        }\n      };\n\n      // LEVEL2\n\n      for (var row = 0; row < moduleCount - 1; row += 1) {\n        for (var col = 0; col < moduleCount - 1; col += 1) {\n          var count = 0;\n          if (qrcode.isDark(row, col) ) count += 1;\n          if (qrcode.isDark(row + 1, col) ) count += 1;\n          if (qrcode.isDark(row, col + 1) ) count += 1;\n          if (qrcode.isDark(row + 1, col + 1) ) count += 1;\n          if (count == 0 || count == 4) {\n            lostPoint += 3;\n          }\n        }\n      }\n\n      // LEVEL3\n\n      for (var row = 0; row < moduleCount; row += 1) {\n        for (var col = 0; col < moduleCount - 6; col += 1) {\n          if (qrcode.isDark(row, col)\n              && !qrcode.isDark(row, col + 1)\n              &&  qrcode.isDark(row, col + 2)\n              &&  qrcode.isDark(row, col + 3)\n              &&  qrcode.isDark(row, col + 4)\n              && !qrcode.isDark(row, col + 5)\n              &&  qrcode.isDark(row, col + 6) ) {\n            lostPoint += 40;\n          }\n        }\n      }\n\n      for (var col = 0; col < moduleCount; col += 1) {\n        for (var row = 0; row < moduleCount - 6; row += 1) {\n          if (qrcode.isDark(row, col)\n              && !qrcode.isDark(row + 1, col)\n              &&  qrcode.isDark(row + 2, col)\n              &&  qrcode.isDark(row + 3, col)\n              &&  qrcode.isDark(row + 4, col)\n              && !qrcode.isDark(row + 5, col)\n              &&  qrcode.isDark(row + 6, col) ) {\n            lostPoint += 40;\n          }\n        }\n      }\n\n      // LEVEL4\n\n      var darkCount = 0;\n\n      for (var col = 0; col < moduleCount; col += 1) {\n        for (var row = 0; row < moduleCount; row += 1) {\n          if (qrcode.isDark(row, col) ) {\n            darkCount += 1;\n          }\n        }\n      }\n\n      var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n      lostPoint += ratio * 10;\n\n      return lostPoint;\n    };\n\n    return _this;\n  }();\n\n  //---------------------------------------------------------------------\n  // QRMath\n  //---------------------------------------------------------------------\n\n  var QRMath = function() {\n\n    var EXP_TABLE = new Array(256);\n    var LOG_TABLE = new Array(256);\n\n    // initialize tables\n    for (var i = 0; i < 8; i += 1) {\n      EXP_TABLE[i] = 1 << i;\n    }\n    for (var i = 8; i < 256; i += 1) {\n      EXP_TABLE[i] = EXP_TABLE[i - 4]\n        ^ EXP_TABLE[i - 5]\n        ^ EXP_TABLE[i - 6]\n        ^ EXP_TABLE[i - 8];\n    }\n    for (var i = 0; i < 255; i += 1) {\n      LOG_TABLE[EXP_TABLE[i] ] = i;\n    }\n\n    var _this = {};\n\n    _this.glog = function(n) {\n\n      if (n < 1) {\n        throw 'glog(' + n + ')';\n      }\n\n      return LOG_TABLE[n];\n    };\n\n    _this.gexp = function(n) {\n\n      while (n < 0) {\n        n += 255;\n      }\n\n      while (n >= 256) {\n        n -= 255;\n      }\n\n      return EXP_TABLE[n];\n    };\n\n    return _this;\n  }();\n\n  //---------------------------------------------------------------------\n  // qrPolynomial\n  //---------------------------------------------------------------------\n\n  function qrPolynomial(num, shift) {\n\n    if (typeof num.length == 'undefined') {\n      throw num.length + '/' + shift;\n    }\n\n    var _num = function() {\n      var offset = 0;\n      while (offset < num.length && num[offset] == 0) {\n        offset += 1;\n      }\n      var _num = new Array(num.length - offset + shift);\n      for (var i = 0; i < num.length - offset; i += 1) {\n        _num[i] = num[i + offset];\n      }\n      return _num;\n    }();\n\n    var _this = {};\n\n    _this.getAt = function(index) {\n      return _num[index];\n    };\n\n    _this.getLength = function() {\n      return _num.length;\n    };\n\n    _this.multiply = function(e) {\n\n      var num = new Array(_this.getLength() + e.getLength() - 1);\n\n      for (var i = 0; i < _this.getLength(); i += 1) {\n        for (var j = 0; j < e.getLength(); j += 1) {\n          num[i + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i) ) + QRMath.glog(e.getAt(j) ) );\n        }\n      }\n\n      return qrPolynomial(num, 0);\n    };\n\n    _this.mod = function(e) {\n\n      if (_this.getLength() - e.getLength() < 0) {\n        return _this;\n      }\n\n      var ratio = QRMath.glog(_this.getAt(0) ) - QRMath.glog(e.getAt(0) );\n\n      var num = new Array(_this.getLength() );\n      for (var i = 0; i < _this.getLength(); i += 1) {\n        num[i] = _this.getAt(i);\n      }\n\n      for (var i = 0; i < e.getLength(); i += 1) {\n        num[i] ^= QRMath.gexp(QRMath.glog(e.getAt(i) ) + ratio);\n      }\n\n      // recursive call\n      return qrPolynomial(num, 0).mod(e);\n    };\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // QRRSBlock\n  //---------------------------------------------------------------------\n\n  var QRRSBlock = function() {\n\n    var RS_BLOCK_TABLE = [\n\n      // L\n      // M\n      // Q\n      // H\n\n      // 1\n      [1, 26, 19],\n      [1, 26, 16],\n      [1, 26, 13],\n      [1, 26, 9],\n\n      // 2\n      [1, 44, 34],\n      [1, 44, 28],\n      [1, 44, 22],\n      [1, 44, 16],\n\n      // 3\n      [1, 70, 55],\n      [1, 70, 44],\n      [2, 35, 17],\n      [2, 35, 13],\n\n      // 4\n      [1, 100, 80],\n      [2, 50, 32],\n      [2, 50, 24],\n      [4, 25, 9],\n\n      // 5\n      [1, 134, 108],\n      [2, 67, 43],\n      [2, 33, 15, 2, 34, 16],\n      [2, 33, 11, 2, 34, 12],\n\n      // 6\n      [2, 86, 68],\n      [4, 43, 27],\n      [4, 43, 19],\n      [4, 43, 15],\n\n      // 7\n      [2, 98, 78],\n      [4, 49, 31],\n      [2, 32, 14, 4, 33, 15],\n      [4, 39, 13, 1, 40, 14],\n\n      // 8\n      [2, 121, 97],\n      [2, 60, 38, 2, 61, 39],\n      [4, 40, 18, 2, 41, 19],\n      [4, 40, 14, 2, 41, 15],\n\n      // 9\n      [2, 146, 116],\n      [3, 58, 36, 2, 59, 37],\n      [4, 36, 16, 4, 37, 17],\n      [4, 36, 12, 4, 37, 13],\n\n      // 10\n      [2, 86, 68, 2, 87, 69],\n      [4, 69, 43, 1, 70, 44],\n      [6, 43, 19, 2, 44, 20],\n      [6, 43, 15, 2, 44, 16],\n\n      // 11\n      [4, 101, 81],\n      [1, 80, 50, 4, 81, 51],\n      [4, 50, 22, 4, 51, 23],\n      [3, 36, 12, 8, 37, 13],\n\n      // 12\n      [2, 116, 92, 2, 117, 93],\n      [6, 58, 36, 2, 59, 37],\n      [4, 46, 20, 6, 47, 21],\n      [7, 42, 14, 4, 43, 15],\n\n      // 13\n      [4, 133, 107],\n      [8, 59, 37, 1, 60, 38],\n      [8, 44, 20, 4, 45, 21],\n      [12, 33, 11, 4, 34, 12],\n\n      // 14\n      [3, 145, 115, 1, 146, 116],\n      [4, 64, 40, 5, 65, 41],\n      [11, 36, 16, 5, 37, 17],\n      [11, 36, 12, 5, 37, 13],\n\n      // 15\n      [5, 109, 87, 1, 110, 88],\n      [5, 65, 41, 5, 66, 42],\n      [5, 54, 24, 7, 55, 25],\n      [11, 36, 12, 7, 37, 13],\n\n      // 16\n      [5, 122, 98, 1, 123, 99],\n      [7, 73, 45, 3, 74, 46],\n      [15, 43, 19, 2, 44, 20],\n      [3, 45, 15, 13, 46, 16],\n\n      // 17\n      [1, 135, 107, 5, 136, 108],\n      [10, 74, 46, 1, 75, 47],\n      [1, 50, 22, 15, 51, 23],\n      [2, 42, 14, 17, 43, 15],\n\n      // 18\n      [5, 150, 120, 1, 151, 121],\n      [9, 69, 43, 4, 70, 44],\n      [17, 50, 22, 1, 51, 23],\n      [2, 42, 14, 19, 43, 15],\n\n      // 19\n      [3, 141, 113, 4, 142, 114],\n      [3, 70, 44, 11, 71, 45],\n      [17, 47, 21, 4, 48, 22],\n      [9, 39, 13, 16, 40, 14],\n\n      // 20\n      [3, 135, 107, 5, 136, 108],\n      [3, 67, 41, 13, 68, 42],\n      [15, 54, 24, 5, 55, 25],\n      [15, 43, 15, 10, 44, 16],\n\n      // 21\n      [4, 144, 116, 4, 145, 117],\n      [17, 68, 42],\n      [17, 50, 22, 6, 51, 23],\n      [19, 46, 16, 6, 47, 17],\n\n      // 22\n      [2, 139, 111, 7, 140, 112],\n      [17, 74, 46],\n      [7, 54, 24, 16, 55, 25],\n      [34, 37, 13],\n\n      // 23\n      [4, 151, 121, 5, 152, 122],\n      [4, 75, 47, 14, 76, 48],\n      [11, 54, 24, 14, 55, 25],\n      [16, 45, 15, 14, 46, 16],\n\n      // 24\n      [6, 147, 117, 4, 148, 118],\n      [6, 73, 45, 14, 74, 46],\n      [11, 54, 24, 16, 55, 25],\n      [30, 46, 16, 2, 47, 17],\n\n      // 25\n      [8, 132, 106, 4, 133, 107],\n      [8, 75, 47, 13, 76, 48],\n      [7, 54, 24, 22, 55, 25],\n      [22, 45, 15, 13, 46, 16],\n\n      // 26\n      [10, 142, 114, 2, 143, 115],\n      [19, 74, 46, 4, 75, 47],\n      [28, 50, 22, 6, 51, 23],\n      [33, 46, 16, 4, 47, 17],\n\n      // 27\n      [8, 152, 122, 4, 153, 123],\n      [22, 73, 45, 3, 74, 46],\n      [8, 53, 23, 26, 54, 24],\n      [12, 45, 15, 28, 46, 16],\n\n      // 28\n      [3, 147, 117, 10, 148, 118],\n      [3, 73, 45, 23, 74, 46],\n      [4, 54, 24, 31, 55, 25],\n      [11, 45, 15, 31, 46, 16],\n\n      // 29\n      [7, 146, 116, 7, 147, 117],\n      [21, 73, 45, 7, 74, 46],\n      [1, 53, 23, 37, 54, 24],\n      [19, 45, 15, 26, 46, 16],\n\n      // 30\n      [5, 145, 115, 10, 146, 116],\n      [19, 75, 47, 10, 76, 48],\n      [15, 54, 24, 25, 55, 25],\n      [23, 45, 15, 25, 46, 16],\n\n      // 31\n      [13, 145, 115, 3, 146, 116],\n      [2, 74, 46, 29, 75, 47],\n      [42, 54, 24, 1, 55, 25],\n      [23, 45, 15, 28, 46, 16],\n\n      // 32\n      [17, 145, 115],\n      [10, 74, 46, 23, 75, 47],\n      [10, 54, 24, 35, 55, 25],\n      [19, 45, 15, 35, 46, 16],\n\n      // 33\n      [17, 145, 115, 1, 146, 116],\n      [14, 74, 46, 21, 75, 47],\n      [29, 54, 24, 19, 55, 25],\n      [11, 45, 15, 46, 46, 16],\n\n      // 34\n      [13, 145, 115, 6, 146, 116],\n      [14, 74, 46, 23, 75, 47],\n      [44, 54, 24, 7, 55, 25],\n      [59, 46, 16, 1, 47, 17],\n\n      // 35\n      [12, 151, 121, 7, 152, 122],\n      [12, 75, 47, 26, 76, 48],\n      [39, 54, 24, 14, 55, 25],\n      [22, 45, 15, 41, 46, 16],\n\n      // 36\n      [6, 151, 121, 14, 152, 122],\n      [6, 75, 47, 34, 76, 48],\n      [46, 54, 24, 10, 55, 25],\n      [2, 45, 15, 64, 46, 16],\n\n      // 37\n      [17, 152, 122, 4, 153, 123],\n      [29, 74, 46, 14, 75, 47],\n      [49, 54, 24, 10, 55, 25],\n      [24, 45, 15, 46, 46, 16],\n\n      // 38\n      [4, 152, 122, 18, 153, 123],\n      [13, 74, 46, 32, 75, 47],\n      [48, 54, 24, 14, 55, 25],\n      [42, 45, 15, 32, 46, 16],\n\n      // 39\n      [20, 147, 117, 4, 148, 118],\n      [40, 75, 47, 7, 76, 48],\n      [43, 54, 24, 22, 55, 25],\n      [10, 45, 15, 67, 46, 16],\n\n      // 40\n      [19, 148, 118, 6, 149, 119],\n      [18, 75, 47, 31, 76, 48],\n      [34, 54, 24, 34, 55, 25],\n      [20, 45, 15, 61, 46, 16]\n    ];\n\n    var qrRSBlock = function(totalCount, dataCount) {\n      var _this = {};\n      _this.totalCount = totalCount;\n      _this.dataCount = dataCount;\n      return _this;\n    };\n\n    var _this = {};\n\n    var getRsBlockTable = function(typeNumber, errorCorrectionLevel) {\n\n      switch(errorCorrectionLevel) {\n      case QRErrorCorrectionLevel.L :\n        return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n      case QRErrorCorrectionLevel.M :\n        return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n      case QRErrorCorrectionLevel.Q :\n        return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n      case QRErrorCorrectionLevel.H :\n        return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n      default :\n        return undefined;\n      }\n    };\n\n    _this.getRSBlocks = function(typeNumber, errorCorrectionLevel) {\n\n      var rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);\n\n      if (typeof rsBlock == 'undefined') {\n        throw 'bad rs block @ typeNumber:' + typeNumber +\n            '/errorCorrectionLevel:' + errorCorrectionLevel;\n      }\n\n      var length = rsBlock.length / 3;\n\n      var list = [];\n\n      for (var i = 0; i < length; i += 1) {\n\n        var count = rsBlock[i * 3 + 0];\n        var totalCount = rsBlock[i * 3 + 1];\n        var dataCount = rsBlock[i * 3 + 2];\n\n        for (var j = 0; j < count; j += 1) {\n          list.push(qrRSBlock(totalCount, dataCount) );\n        }\n      }\n\n      return list;\n    };\n\n    return _this;\n  }();\n\n  //---------------------------------------------------------------------\n  // qrBitBuffer\n  //---------------------------------------------------------------------\n\n  var qrBitBuffer = function() {\n\n    var _buffer = [];\n    var _length = 0;\n\n    var _this = {};\n\n    _this.getBuffer = function() {\n      return _buffer;\n    };\n\n    _this.getAt = function(index) {\n      var bufIndex = Math.floor(index / 8);\n      return ( (_buffer[bufIndex] >>> (7 - index % 8) ) & 1) == 1;\n    };\n\n    _this.put = function(num, length) {\n      for (var i = 0; i < length; i += 1) {\n        _this.putBit( ( (num >>> (length - i - 1) ) & 1) == 1);\n      }\n    };\n\n    _this.getLengthInBits = function() {\n      return _length;\n    };\n\n    _this.putBit = function(bit) {\n\n      var bufIndex = Math.floor(_length / 8);\n      if (_buffer.length <= bufIndex) {\n        _buffer.push(0);\n      }\n\n      if (bit) {\n        _buffer[bufIndex] |= (0x80 >>> (_length % 8) );\n      }\n\n      _length += 1;\n    };\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // qrNumber\n  //---------------------------------------------------------------------\n\n  var qrNumber = function(data) {\n\n    var _mode = QRMode.MODE_NUMBER;\n    var _data = data;\n\n    var _this = {};\n\n    _this.getMode = function() {\n      return _mode;\n    };\n\n    _this.getLength = function(buffer) {\n      return _data.length;\n    };\n\n    _this.write = function(buffer) {\n\n      var data = _data;\n\n      var i = 0;\n\n      while (i + 2 < data.length) {\n        buffer.put(strToNum(data.substring(i, i + 3) ), 10);\n        i += 3;\n      }\n\n      if (i < data.length) {\n        if (data.length - i == 1) {\n          buffer.put(strToNum(data.substring(i, i + 1) ), 4);\n        } else if (data.length - i == 2) {\n          buffer.put(strToNum(data.substring(i, i + 2) ), 7);\n        }\n      }\n    };\n\n    var strToNum = function(s) {\n      var num = 0;\n      for (var i = 0; i < s.length; i += 1) {\n        num = num * 10 + chatToNum(s.charAt(i) );\n      }\n      return num;\n    };\n\n    var chatToNum = function(c) {\n      if ('0' <= c && c <= '9') {\n        return c.charCodeAt(0) - '0'.charCodeAt(0);\n      }\n      throw 'illegal char :' + c;\n    };\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // qrAlphaNum\n  //---------------------------------------------------------------------\n\n  var qrAlphaNum = function(data) {\n\n    var _mode = QRMode.MODE_ALPHA_NUM;\n    var _data = data;\n\n    var _this = {};\n\n    _this.getMode = function() {\n      return _mode;\n    };\n\n    _this.getLength = function(buffer) {\n      return _data.length;\n    };\n\n    _this.write = function(buffer) {\n\n      var s = _data;\n\n      var i = 0;\n\n      while (i + 1 < s.length) {\n        buffer.put(\n          getCode(s.charAt(i) ) * 45 +\n          getCode(s.charAt(i + 1) ), 11);\n        i += 2;\n      }\n\n      if (i < s.length) {\n        buffer.put(getCode(s.charAt(i) ), 6);\n      }\n    };\n\n    var getCode = function(c) {\n\n      if ('0' <= c && c <= '9') {\n        return c.charCodeAt(0) - '0'.charCodeAt(0);\n      } else if ('A' <= c && c <= 'Z') {\n        return c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n      } else {\n        switch (c) {\n        case ' ' : return 36;\n        case '$' : return 37;\n        case '%' : return 38;\n        case '*' : return 39;\n        case '+' : return 40;\n        case '-' : return 41;\n        case '.' : return 42;\n        case '/' : return 43;\n        case ':' : return 44;\n        default :\n          throw 'illegal char :' + c;\n        }\n      }\n    };\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // qr8BitByte\n  //---------------------------------------------------------------------\n\n  var qr8BitByte = function(data) {\n\n    var _mode = QRMode.MODE_8BIT_BYTE;\n    var _data = data;\n    var _bytes = qrcode.stringToBytes(data);\n\n    var _this = {};\n\n    _this.getMode = function() {\n      return _mode;\n    };\n\n    _this.getLength = function(buffer) {\n      return _bytes.length;\n    };\n\n    _this.write = function(buffer) {\n      for (var i = 0; i < _bytes.length; i += 1) {\n        buffer.put(_bytes[i], 8);\n      }\n    };\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // qrKanji\n  //---------------------------------------------------------------------\n\n  var qrKanji = function(data) {\n\n    var _mode = QRMode.MODE_KANJI;\n    var _data = data;\n\n    var stringToBytes = qrcode.stringToBytesFuncs['SJIS'];\n    if (!stringToBytes) {\n      throw 'sjis not supported.';\n    }\n    !function(c, code) {\n      // self test for sjis support.\n      var test = stringToBytes(c);\n      if (test.length != 2 || ( (test[0] << 8) | test[1]) != code) {\n        throw 'sjis not supported.';\n      }\n    }('\\u53cb', 0x9746);\n\n    var _bytes = stringToBytes(data);\n\n    var _this = {};\n\n    _this.getMode = function() {\n      return _mode;\n    };\n\n    _this.getLength = function(buffer) {\n      return ~~(_bytes.length / 2);\n    };\n\n    _this.write = function(buffer) {\n\n      var data = _bytes;\n\n      var i = 0;\n\n      while (i + 1 < data.length) {\n\n        var c = ( (0xff & data[i]) << 8) | (0xff & data[i + 1]);\n\n        if (0x8140 <= c && c <= 0x9FFC) {\n          c -= 0x8140;\n        } else if (0xE040 <= c && c <= 0xEBBF) {\n          c -= 0xC140;\n        } else {\n          throw 'illegal char at ' + (i + 1) + '/' + c;\n        }\n\n        c = ( (c >>> 8) & 0xff) * 0xC0 + (c & 0xff);\n\n        buffer.put(c, 13);\n\n        i += 2;\n      }\n\n      if (i < data.length) {\n        throw 'illegal char at ' + (i + 1);\n      }\n    };\n\n    return _this;\n  };\n\n  //=====================================================================\n  // GIF Support etc.\n  //\n\n  //---------------------------------------------------------------------\n  // byteArrayOutputStream\n  //---------------------------------------------------------------------\n\n  var byteArrayOutputStream = function() {\n\n    var _bytes = [];\n\n    var _this = {};\n\n    _this.writeByte = function(b) {\n      _bytes.push(b & 0xff);\n    };\n\n    _this.writeShort = function(i) {\n      _this.writeByte(i);\n      _this.writeByte(i >>> 8);\n    };\n\n    _this.writeBytes = function(b, off, len) {\n      off = off || 0;\n      len = len || b.length;\n      for (var i = 0; i < len; i += 1) {\n        _this.writeByte(b[i + off]);\n      }\n    };\n\n    _this.writeString = function(s) {\n      for (var i = 0; i < s.length; i += 1) {\n        _this.writeByte(s.charCodeAt(i) );\n      }\n    };\n\n    _this.toByteArray = function() {\n      return _bytes;\n    };\n\n    _this.toString = function() {\n      var s = '';\n      s += '[';\n      for (var i = 0; i < _bytes.length; i += 1) {\n        if (i > 0) {\n          s += ',';\n        }\n        s += _bytes[i];\n      }\n      s += ']';\n      return s;\n    };\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // base64EncodeOutputStream\n  //---------------------------------------------------------------------\n\n  var base64EncodeOutputStream = function() {\n\n    var _buffer = 0;\n    var _buflen = 0;\n    var _length = 0;\n    var _base64 = '';\n\n    var _this = {};\n\n    var writeEncoded = function(b) {\n      _base64 += String.fromCharCode(encode(b & 0x3f) );\n    };\n\n    var encode = function(n) {\n      if (n < 0) {\n        // error.\n      } else if (n < 26) {\n        return 0x41 + n;\n      } else if (n < 52) {\n        return 0x61 + (n - 26);\n      } else if (n < 62) {\n        return 0x30 + (n - 52);\n      } else if (n == 62) {\n        return 0x2b;\n      } else if (n == 63) {\n        return 0x2f;\n      }\n      throw 'n:' + n;\n    };\n\n    _this.writeByte = function(n) {\n\n      _buffer = (_buffer << 8) | (n & 0xff);\n      _buflen += 8;\n      _length += 1;\n\n      while (_buflen >= 6) {\n        writeEncoded(_buffer >>> (_buflen - 6) );\n        _buflen -= 6;\n      }\n    };\n\n    _this.flush = function() {\n\n      if (_buflen > 0) {\n        writeEncoded(_buffer << (6 - _buflen) );\n        _buffer = 0;\n        _buflen = 0;\n      }\n\n      if (_length % 3 != 0) {\n        // padding\n        var padlen = 3 - _length % 3;\n        for (var i = 0; i < padlen; i += 1) {\n          _base64 += '=';\n        }\n      }\n    };\n\n    _this.toString = function() {\n      return _base64;\n    };\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // base64DecodeInputStream\n  //---------------------------------------------------------------------\n\n  var base64DecodeInputStream = function(str) {\n\n    var _str = str;\n    var _pos = 0;\n    var _buffer = 0;\n    var _buflen = 0;\n\n    var _this = {};\n\n    _this.read = function() {\n\n      while (_buflen < 8) {\n\n        if (_pos >= _str.length) {\n          if (_buflen == 0) {\n            return -1;\n          }\n          throw 'unexpected end of file./' + _buflen;\n        }\n\n        var c = _str.charAt(_pos);\n        _pos += 1;\n\n        if (c == '=') {\n          _buflen = 0;\n          return -1;\n        } else if (c.match(/^\\s$/) ) {\n          // ignore if whitespace.\n          continue;\n        }\n\n        _buffer = (_buffer << 6) | decode(c.charCodeAt(0) );\n        _buflen += 6;\n      }\n\n      var n = (_buffer >>> (_buflen - 8) ) & 0xff;\n      _buflen -= 8;\n      return n;\n    };\n\n    var decode = function(c) {\n      if (0x41 <= c && c <= 0x5a) {\n        return c - 0x41;\n      } else if (0x61 <= c && c <= 0x7a) {\n        return c - 0x61 + 26;\n      } else if (0x30 <= c && c <= 0x39) {\n        return c - 0x30 + 52;\n      } else if (c == 0x2b) {\n        return 62;\n      } else if (c == 0x2f) {\n        return 63;\n      } else {\n        throw 'c:' + c;\n      }\n    };\n\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // gifImage (B/W)\n  //---------------------------------------------------------------------\n\n  var gifImage = function(width, height) {\n\n    var _width = width;\n    var _height = height;\n    var _data = new Array(width * height);\n\n    var _this = {};\n\n    _this.setPixel = function(x, y, pixel) {\n      _data[y * _width + x] = pixel;\n    };\n\n    _this.write = function(out) {\n\n      //---------------------------------\n      // GIF Signature\n\n      out.writeString('GIF87a');\n\n      //---------------------------------\n      // Screen Descriptor\n\n      out.writeShort(_width);\n      out.writeShort(_height);\n\n      out.writeByte(0x80); // 2bit\n      out.writeByte(0);\n      out.writeByte(0);\n\n      //---------------------------------\n      // Global Color Map\n\n      // black\n      out.writeByte(0x00);\n      out.writeByte(0x00);\n      out.writeByte(0x00);\n\n      // white\n      out.writeByte(0xff);\n      out.writeByte(0xff);\n      out.writeByte(0xff);\n\n      //---------------------------------\n      // Image Descriptor\n\n      out.writeString(',');\n      out.writeShort(0);\n      out.writeShort(0);\n      out.writeShort(_width);\n      out.writeShort(_height);\n      out.writeByte(0);\n\n      //---------------------------------\n      // Local Color Map\n\n      //---------------------------------\n      // Raster Data\n\n      var lzwMinCodeSize = 2;\n      var raster = getLZWRaster(lzwMinCodeSize);\n\n      out.writeByte(lzwMinCodeSize);\n\n      var offset = 0;\n\n      while (raster.length - offset > 255) {\n        out.writeByte(255);\n        out.writeBytes(raster, offset, 255);\n        offset += 255;\n      }\n\n      out.writeByte(raster.length - offset);\n      out.writeBytes(raster, offset, raster.length - offset);\n      out.writeByte(0x00);\n\n      //---------------------------------\n      // GIF Terminator\n      out.writeString(';');\n    };\n\n    var bitOutputStream = function(out) {\n\n      var _out = out;\n      var _bitLength = 0;\n      var _bitBuffer = 0;\n\n      var _this = {};\n\n      _this.write = function(data, length) {\n\n        if ( (data >>> length) != 0) {\n          throw 'length over';\n        }\n\n        while (_bitLength + length >= 8) {\n          _out.writeByte(0xff & ( (data << _bitLength) | _bitBuffer) );\n          length -= (8 - _bitLength);\n          data >>>= (8 - _bitLength);\n          _bitBuffer = 0;\n          _bitLength = 0;\n        }\n\n        _bitBuffer = (data << _bitLength) | _bitBuffer;\n        _bitLength = _bitLength + length;\n      };\n\n      _this.flush = function() {\n        if (_bitLength > 0) {\n          _out.writeByte(_bitBuffer);\n        }\n      };\n\n      return _this;\n    };\n\n    var getLZWRaster = function(lzwMinCodeSize) {\n\n      var clearCode = 1 << lzwMinCodeSize;\n      var endCode = (1 << lzwMinCodeSize) + 1;\n      var bitLength = lzwMinCodeSize + 1;\n\n      // Setup LZWTable\n      var table = lzwTable();\n\n      for (var i = 0; i < clearCode; i += 1) {\n        table.add(String.fromCharCode(i) );\n      }\n      table.add(String.fromCharCode(clearCode) );\n      table.add(String.fromCharCode(endCode) );\n\n      var byteOut = byteArrayOutputStream();\n      var bitOut = bitOutputStream(byteOut);\n\n      // clear code\n      bitOut.write(clearCode, bitLength);\n\n      var dataIndex = 0;\n\n      var s = String.fromCharCode(_data[dataIndex]);\n      dataIndex += 1;\n\n      while (dataIndex < _data.length) {\n\n        var c = String.fromCharCode(_data[dataIndex]);\n        dataIndex += 1;\n\n        if (table.contains(s + c) ) {\n\n          s = s + c;\n\n        } else {\n\n          bitOut.write(table.indexOf(s), bitLength);\n\n          if (table.size() < 0xfff) {\n\n            if (table.size() == (1 << bitLength) ) {\n              bitLength += 1;\n            }\n\n            table.add(s + c);\n          }\n\n          s = c;\n        }\n      }\n\n      bitOut.write(table.indexOf(s), bitLength);\n\n      // end code\n      bitOut.write(endCode, bitLength);\n\n      bitOut.flush();\n\n      return byteOut.toByteArray();\n    };\n\n    var lzwTable = function() {\n\n      var _map = {};\n      var _size = 0;\n\n      var _this = {};\n\n      _this.add = function(key) {\n        if (_this.contains(key) ) {\n          throw 'dup key:' + key;\n        }\n        _map[key] = _size;\n        _size += 1;\n      };\n\n      _this.size = function() {\n        return _size;\n      };\n\n      _this.indexOf = function(key) {\n        return _map[key];\n      };\n\n      _this.contains = function(key) {\n        return typeof _map[key] != 'undefined';\n      };\n\n      return _this;\n    };\n\n    return _this;\n  };\n\n  var createDataURL = function(width, height, getPixel) {\n    var gif = gifImage(width, height);\n    for (var y = 0; y < height; y += 1) {\n      for (var x = 0; x < width; x += 1) {\n        gif.setPixel(x, y, getPixel(x, y) );\n      }\n    }\n\n    var b = byteArrayOutputStream();\n    gif.write(b);\n\n    var base64 = base64EncodeOutputStream();\n    var bytes = b.toByteArray();\n    for (var i = 0; i < bytes.length; i += 1) {\n      base64.writeByte(bytes[i]);\n    }\n    base64.flush();\n\n    return 'data:image/gif;base64,' + base64;\n  };\n\n  //---------------------------------------------------------------------\n  // returns qrcode function.\n\n  return qrcode;\n}();\n\n// multibyte support\n!function() {\n\n  qrcode.stringToBytesFuncs['UTF-8'] = function(s) {\n    // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n    function toUTF8Array(str) {\n      var utf8 = [];\n      for (var i=0; i < str.length; i++) {\n        var charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n          utf8.push(0xc0 | (charcode >> 6),\n              0x80 | (charcode & 0x3f));\n        }\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\n          utf8.push(0xe0 | (charcode >> 12),\n              0x80 | ((charcode>>6) & 0x3f),\n              0x80 | (charcode & 0x3f));\n        }\n        // surrogate pair\n        else {\n          i++;\n          // UTF-16 encodes 0x10000-0x10FFFF by\n          // subtracting 0x10000 and splitting the\n          // 20 bits of 0x0-0xFFFFF into two halves\n          charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n            | (str.charCodeAt(i) & 0x3ff));\n          utf8.push(0xf0 | (charcode >>18),\n              0x80 | ((charcode>>12) & 0x3f),\n              0x80 | ((charcode>>6) & 0x3f),\n              0x80 | (charcode & 0x3f));\n        }\n      }\n      return utf8;\n    }\n    return toUTF8Array(s);\n  };\n\n}();\n\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n      define([], factory);\n  } else if (typeof exports === 'object') {\n      module.exports = factory();\n  }\n}(function () {\n    return qrcode;\n}));\n","export default \"<div id=\\\"qrcode\\\" (click)=\\\"generateQrCode()\\\"></div>\\n\"","export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-button (click)=\\\"onBack()\\\" >\\r\\n        <ion-icon name=\\\"arrow-back-outline\\\"></ion-icon>\\r\\n      </ion-button>\\r\\n      <!-- <ion-back-button defaultHref=\\\"/tabs/create-classes\\\" ></ion-back-button> -->\\r\\n    </ion-buttons>\\r\\n    <ion-title>班课二维码信息</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content >\\r\\n  <div class=\\\"wrap\\\">\\r\\n    <ion-qrcode [data]=\\\"courseid\\\" [size]=\\\"180\\\" [level]=\\\"'H'\\\" [logo]=\\\"'assets/logo.png'\\\"  [foreground]=\\\"'black'\\\"></ion-qrcode>\\r\\n  </div>\\r\\n\\r\\n</ion-content>\\r\\n\"","import { AfterViewInit, Component, ElementRef, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport {qrcanvas} from 'qrcanvas';\n\n@Component({\n  selector: 'ion-qrcode',\n  templateUrl: 'qrcode.html'\n})\nexport class QrCodeComponent implements AfterViewInit, OnChanges {\n  options: any;\n  effects = ['none', 'liquid', 'round', 'spot'];\n  @Input() size: string;\n  @Input() data: string;\n  @Input() logo: string;\n  @Input() background: string;\n  @Input() foreground: string;\n  @Input() colorOut: string;\n  @Input() colorIn: string;\n  @Input() level: string;\n\n  constructor(private elementRef: ElementRef) {\n  }\n\n  ngAfterViewInit() {\n    // this.generateQrCode();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ('background' in changes ||\n      'backgroundAlpha' in changes ||\n      'foreground' in changes ||\n      'foregroundAlpha' in changes ||\n      'colorOut' in changes ||\n      'colorIn' in changes ||\n      'level' in changes ||\n      'mime' in changes ||\n      'padding' in changes ||\n      'size' in changes ||\n      'data' in changes ||\n      'logo' in changes ||\n      'canvas' in changes) {\n      this.generateQrCode();\n    }\n  }\n\n  generateQrCode() {\n    let innerHTML = '';\n    this.elementRef.nativeElement.querySelector('#qrcode').innerHTML = innerHTML;\n    // document.getElementById('qrcode').innerText = '';\n    const colorFore = this.foreground;\n    const colorOut = this.colorOut;\n    const colorIn = this.colorIn;\n    this.options = {\n      cellSize: 8,\n      size: this.size,\n      correctLevel: 'H',\n      data: this.data,\n      // logo: {\n      //   image: image,\n      //   size: 10 / 100,\n      // },\n      foreground: [\n        // foreground color\n        {style: colorFore},\n        // outer squares of the positioner\n        {row: 0, rows: 4, col: 0, cols: 4, style: colorOut},\n        {row: -4, rows: 4, col: 0, cols: 4, style: colorOut},\n        {row: 0, rows: 4, col: -4, cols: 4, style: colorOut},\n        // inner squares of the positioner\n        {row: 1, rows: 2, col: 1, cols: 2, style: colorIn},\n        {row: -3, rows: 2, col: 1, cols: 2, style: colorIn},\n        {row: 1, rows: 2, col: -3, cols: 2, style: colorIn},\n      ],\n      background: this.background,\n      effect: {\n        key: 'none',\n        value: 1,\n      }\n    };\n    this.options.effect.key = this.effects[Math.floor(Math.random() * this.effects.length)];\n    if (this.logo) {\n      let image = new Image();\n      image.src = this.logo;\n      this.options.logo = {\n        image,\n        size: 10 / 100\n      };\n      image.onload = () => {\n        const canvas = qrcanvas(this.options);\n        // document.getElementById('qrcode').appendChild(canvas);\n        this.elementRef.nativeElement.querySelector('#qrcode').appendChild(canvas);\n      };\n    } else {\n      const canvas = qrcanvas(this.options);\n      // document.getElementById('qrcode').appendChild(canvas);\n      this.elementRef.nativeElement.querySelector('#qrcode').appendChild(canvas);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { QrCodeComponent, } from './components/index';\nimport { IonicModule } from '@ionic/angular';\n\n\n@NgModule({\n  declarations: [\n    QrCodeComponent,\n  \n  ],\n  imports: [\n    IonicModule,\n    CommonModule\n  ],\n  exports: [\n    QrCodeComponent,\n  \n  ],\n  entryComponents: [\n    \n  ],\n  providers: [\n  ]\n})\nexport class SharedModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { QrcodePage } from './qrcode.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: QrcodePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class QrcodePageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { QrcodePageRoutingModule } from './qrcode-routing.module';\n\nimport { QrcodePage } from './qrcode.page';\nimport { SharedModule } from 'src/app/modules';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    QrcodePageRoutingModule,\n    SharedModule\n    \n  ],\n  declarations: [QrcodePage]\n})\nexport class QrcodePageModule {}\n","export default \".wrap {\\n  margin-top: 30px;\\n  text-align: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvY3JlYXRlLWNsYXNzZXMvcXJjb2RlL0Q6XFxoeHNreXVuXFxtb2JpbGVcXGRhb3l1bi9zcmNcXGFwcFxccGFnZXNcXGNyZWF0ZS1jbGFzc2VzXFxxcmNvZGVcXHFyY29kZS5wYWdlLnNjc3MiLCJzcmMvYXBwL3BhZ2VzL2NyZWF0ZS1jbGFzc2VzL3FyY29kZS9xcmNvZGUucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksZ0JBQUE7RUFDQSxrQkFBQTtBQ0NKIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvY3JlYXRlLWNsYXNzZXMvcXJjb2RlL3FyY29kZS5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIud3JhcCB7XHJcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIH0iLCIud3JhcCB7XG4gIG1hcmdpbi10b3A6IDMwcHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn0iXX0= */\"","import { Component, OnInit, ElementRef, Input } from '@angular/core';\r\nimport { qrcanvas } from 'qrcanvas';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-qrcode',\r\n  templateUrl: './qrcode.page.html',\r\n  styleUrls: ['./qrcode.page.scss'],\r\n})\r\nexport class QrcodePage implements OnInit {\r\n\r\n  constructor(private elementRef: ElementRef,private activatedRoute: ActivatedRoute,) { }\r\n  options: any;\r\n  effects = ['none', 'liquid', 'round', 'spot'];\r\n  @Input() size: string;\r\n  @Input() data: string;\r\n  @Input() logo: string;\r\n  courseid=''\r\n  ngOnInit() {\r\n    this.activatedRoute.queryParams.subscribe((result) => {\r\n      this.courseid = result.courseId;\r\n    });\r\n  }\r\n  generateQrCode() {\r\n    let innerHTML = '';\r\n    this.elementRef.nativeElement.querySelector('#qrcode').innerHTML = innerHTML;\r\n    this.options = {\r\n      cellSize: 8,\r\n      size: this.size,\r\n      correctLevel: 'H',\r\n      data: this.data,\r\n      effect: {\r\n        key: 'none',\r\n        value: 1,\r\n      }\r\n    };\r\n    this.options.effect.key = this.effects[Math.floor(Math.random() * this.effects.length)];\r\n    if (this.logo) {\r\n      let image = new Image();\r\n      image.src = this.logo;\r\n      this.options.logo = {\r\n        image,\r\n        size: 20 / 100\r\n      };\r\n      image.onload = () => {\r\n        const canvas = qrcanvas(this.options);\r\n        this.elementRef.nativeElement.querySelector('#qrcode').appendChild(canvas);\r\n      };\r\n    } else {\r\n      const canvas = qrcanvas(this.options);\r\n      this.elementRef.nativeElement.querySelector('#qrcode').appendChild(canvas);\r\n    }\r\n  }\r\n\r\n  onBack(){\r\n    location.replace(\"/tabs/create-classes\")\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///","file":"qrcode-qrcode-module-es5.js"}